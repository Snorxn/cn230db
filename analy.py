import sqlite3

# ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
conn = sqlite3.connect("anime.db")
cursor = conn.cursor()

# 1. Top 10 ‡∏≠‡∏ô‡∏¥‡πÄ‡∏°‡∏∞‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î
cursor.execute('''
    SELECT title_romaji, average_score
    FROM anime
    WHERE average_score IS NOT NULL
    ORDER BY average_score DESC
    LIMIT 10
''')
top_anime = cursor.fetchall()
print("üéñÔ∏è Top 10 Anime by Rating:")
for i, (title, score) in enumerate(top_anime, 1):
    print(f"{i}. {title} ‚Äî {score}")

# 2. ‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
cursor.execute('SELECT AVG(average_score) FROM anime WHERE average_score IS NOT NULL')
avg_score = cursor.fetchone()[0]
print(f"\nüìä Average Score: {avg_score:.2f}")

# 3. ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏≠‡∏ô‡∏¥‡πÄ‡∏°‡∏∞‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
cursor.execute('SELECT COUNT(*) FROM anime')
total = cursor.fetchone()[0]
print(f"\nüìö Total Anime Count: {total}")

# 4. ‡∏™‡∏ï‡∏π‡∏î‡∏¥‡πÇ‡∏≠‡∏ó‡∏µ‡πà‡∏ú‡∏•‡∏¥‡∏ï‡∏≠‡∏ô‡∏¥‡πÄ‡∏°‡∏∞‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
cursor.execute('SELECT studios FROM anime WHERE studios IS NOT NULL')
studios_raw = cursor.fetchall()

# ‡∏™‡∏£‡πâ‡∏≤‡∏á dictionary ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏ï‡∏π‡∏î‡∏¥‡πÇ‡∏≠
studio_count = {}
for row in studios_raw:
    for studio in row[0].split(', '):
        if studio:
            if studio in studio_count:
                studio_count[studio] += 1
            else:
                studio_count[studio] = 1

print("\nüè¢ Top 10 Studios by Number of Anime:")
sorted_studios = sorted(studio_count.items(), key=lambda x: x[1], reverse=True)[:10]
for i, (studio, count) in enumerate(sorted_studios, 1):
    print(f"{i}. {studio}: {count} anime")

# 5. ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏≠‡∏ô‡∏¥‡πÄ‡∏°‡∏∞‡∏¢‡∏≠‡∏î‡∏ô‡∏¥‡∏¢‡∏° (genres)
cursor.execute('SELECT genres FROM anime WHERE genres IS NOT NULL')
genres_raw = cursor.fetchall()

# ‡∏™‡∏£‡πâ‡∏≤‡∏á dictionary ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
genre_count = {}
for row in genres_raw:
    for genre in row[0].split(', '):
        if genre:
            if genre in genre_count:
                genre_count[genre] += 1
            else:
                genre_count[genre] = 1

print("\nüé≠ Top 10 Genres:")
sorted_genres = sorted(genre_count.items(), key=lambda x: x[1], reverse=True)[:10]
for i, (genre, count) in enumerate(sorted_genres, 1):
    print(f"{i}. {genre}: {count} anime")

# 6. ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏≠‡∏ô‡∏¥‡πÄ‡∏°‡∏∞‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ï‡∏≠‡∏ô
cursor.execute('SELECT COUNT(*) FROM anime WHERE average_score IS NULL')
missing_score = cursor.fetchone()[0]
cursor.execute('SELECT COUNT(*) FROM anime WHERE episodes IS NULL')
missing_episodes = cursor.fetchone()[0]
print(f"\n‚ùå Missing average_score: {missing_score}")
print(f"‚ùå Missing episodes: {missing_episodes}")

# 7. ‡∏≠‡∏ô‡∏¥‡πÄ‡∏°‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó Comedy ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î
cursor.execute('''
    SELECT title_romaji, average_score
    FROM anime
    WHERE genres LIKE '%Comedy%'
      AND average_score IS NOT NULL
    ORDER BY average_score DESC
    LIMIT 10
''')
top_comedy = cursor.fetchall()
print("\nüòÇ Top 10 Comedy Anime by Rating:")
for i, (title, score) in enumerate(top_comedy, 1):
    print(f"{i}. {title} ‚Äî {score}")

conn.close()
